import argparse
import getpass

parser = argparse.ArgumentParser()

# add arguments
parser.add_argument('--exp_name', type=str, default='training', help="Name of experiment")
parser.add_argument('--dataset', type=str, default='vg', help="Dataset: vg / coco")
parser.add_argument('--dataset_path', type=str, default='/data/sarthak/VisualGenome/', help="Path to the image dataset")
parser.add_argument('--load_exp_name', type=str, default='training', help="Experiment name for loading trained models")
parser.add_argument('--device', type=str, default='cuda', help="Run the following code on which device")
parser.add_argument('--batchsize', type=int, default=64, help="Training batch size")
parser.add_argument('--test_batchsize', type=int, default=64, help="Testing batch size: TODO")
parser.add_argument('--seed', type=int, default=0, help="Seed")
parser.add_argument('--optim', type=str, default='sgd', help="Optimizer")
parser.add_argument('--optim_gsnn', type=str, default='adam', help="Optimizer for GSNN")
parser.add_argument('--optim_classifier', type=str, default='adam', help="Optimizer for classifier")
parser.add_argument('--load_nets', action='store_true', help="Load previously trained model")
parser.add_argument('--lr', type=float, default=5e-2, help="Learning rate")
parser.add_argument('--encoder_lr', type=float, default=0.1, help="Learning rate factor for encoder")
parser.add_argument('--gsnn_lr', type=float, default=1., help="Learning rate factor for GSNN")
parser.add_argument('--classifier_lr', type=float, default=5e-2, help="Learning rate factor for classifier")
parser.add_argument('--momentum', type=float, default=0.5, help="Momentum")
parser.add_argument('--classifier_momentum', type=float, default=0.5, help="Momentum for classifier")
parser.add_argument('--weight_decay', type=float, default=1e-6, help="Weight decay")
parser.add_argument('--classifier_weight_decay', type=float, default=1e-6, help="Weight decay for classifier")
parser.add_argument('--importance_loss_weight', type=float, default=0.1, help="Weight of importance loss")
parser.add_argument('--multiclass_loss_weight', type=float, default=20., help="Weight of multiclass loss")
parser.add_argument('--num_epochs', type=int, default=50, help="Number of training epochs")
parser.add_argument('--vocab_size', type=int, default=316, help="Size of concept vocabulary")
parser.add_argument('--detector_size', type=int, default=80, help="Size of FRCNN detector")
parser.add_argument('--load_net_type', type=str, default='ViT', help="Encoder type: VGG / ViT")
parser.add_argument('--logs_dir', type=str, default='logs/', help="Directory for saving logs")
parser.add_argument('--graph_pkl', type=str, default='graph.pkl', help="Path to graph pickle file")
parser.add_argument('--start_epoch', type=int, default=0, help="Starting epoch for training")
parser.add_argument('--save_after', type=int, default=1, help="Save frequency for weights during training")
parser.add_argument('--print_after', type=int, default=100, help="Print frequency during training")
parser.add_argument('--print_after_fine', type=int, default=5, help="Print frequency during finetuning")
parser.add_argument('--plot_after', type=int, default=100, help="Plot frequency during training")
parser.add_argument('--context_architecture', type=str, default='gated', help="Architecture for content net")
parser.add_argument('--context_transfer_function', type=str, default='tanh', help="Activation for context net")
parser.add_argument('--context_use_node_input', type=bool, default=True, help="Use node bias for context net")
parser.add_argument('--context_use_ann', type=bool, default=True, help="Use node annotation for context net")
parser.add_argument('--importance_architecture', type=str, default='sigout', help="Architecture for importance net")
parser.add_argument('--importance_transfer_function', type=str, default='tanh', help="Activation for importance net")
parser.add_argument('--importance_use_node_input', type=bool, default=True, help="Use node bias for importance net")
parser.add_argument('--importance_use_ann', type=bool, default=False, help="Use node annotation for importance net")
parser.add_argument('--importance_out_net_h_size', type=int, default=-1, help="")
parser.add_argument('--importance_out_net_num_layer', type=int, default=0, help="")
parser.add_argument('--context_out_net_h_size', type=int, default=10, help="")
parser.add_argument('--context_out_net_num_layer', type=int, default=0, help="")
parser.add_argument('--state_dim', type=int, default=10, help="State dimension for propagation net")
parser.add_argument('--node_bias_size', type=int, default=2, help="Dimensionality for node bias")
parser.add_argument('--context_dim', type=int, default=5, help="Dimensionality for context encoding")
parser.add_argument('--num_steps', type=int, default=3, help="Number of propagation steps")
parser.add_argument('--num_expand', type=int, default=5, help="Number of expansion steps")
parser.add_argument('--init_conf', type=float, default=0.5, help="Initialization confidence")
parser.add_argument('--num_inter_steps', type=int, default=1, help="Number of intermediate steps")
parser.add_argument('--min_num_init', type=int, default=1, help="Minimum number of initialization nodes")
parser.add_argument('--lr_gsnn', type=float, default=1e-3, help="Learning rate for GSNN finetuning: TODO")
parser.add_argument('--momentum_gsnn', type=float, default=0, help="Momentum for GSNN: TODO")
parser.add_argument('--alpha_gsnn', type=float, default=0.95, help="Alpha for GSNN: TODO")
parser.add_argument('--gamma', type=float, default=0.3, help="Discount rate for importance")
parser.add_argument('--use_nodetypes', type=bool, default=False, help="Use nodetypes")
parser.add_argument('--take_subset', type=bool, default=False, help="")
parser.add_argument('--subset_ratio', type=float, default=0.0, help="")
parser.add_argument('--image_conditioned_propnet', type=bool, default=False, help="")
parser.add_argument('--image_conditioned_propnet1', type=bool, default=True, help="")

parser.add_argument('--edge_pred_exp_name', type=str, default='edge_pred', help="Name of edge predictor experiment")
parser.add_argument('--edge_addition', type=bool, default=False, help="")
parser.add_argument('--node_dropout_prob', type=float, default=0.3, help="")
parser.add_argument('--freq_threshold', type=float, default=20, help="")
parser.add_argument('--freq_update_method', type=str, default='active_max_dis', help="")
parser.add_argument('--class_threshold', type=float, default=0.9, help="")
parser.add_argument('--use_cut_graph', type=bool, default=False, help="")
parser.add_argument('--load_cut_graph', type=bool, default=False, help="")
parser.add_argument('--edgetype_threshold', type=float, default=0.85, help="")
parser.add_argument('--edge_update_method', type=str, default='freq_based', help="")
parser.add_argument('--node_embedding_type', type=str, default='glove-encoded', help="one-hot / glove")
parser.add_argument('--node_embedding_dim', type=int, default=50, help="Dimensionality of embedding space for concepts")
parser.add_argument('--node_embedding_neighbor_thresh', type=float, default=3., help="")
parser.add_argument('--add_has_edge', type=bool, default=False, help="")
parser.add_argument('--image_cond_edge_pred', type=bool, default=True, help="Edge Prediction conditioned on Image")
parser.add_argument('--add_no_connection', type=bool, default=True, help="Augment the edge prediction data with no connection data")
parser.add_argument('--test_concepts', type=list, default=['bicycle', 'boat', 'stop sign', 'bird', 'backpack',\
                        'frisbee', 'snowboard', 'surfboard', 'cup', 'fork', 'spoon', 'broccoli',\
                        'chair', 'keyboard', 'microwave', 'vase'], help="Test nodes used for class addition")

parser.add_argument('--use_multimodal_edge_pred', type=bool, default=True, help="Use edge prediction transformer")
parser.add_argument('--multimodal_dropout', type=float, default=0.1, help="Use dropout in edge prediction")
parser.add_argument('--multimodal_attention_h_dim', type=int, default=32, help="Hidden state dimensionality for edge prediction")
parser.add_argument('--multimodal_attention_num_heads', type=int, default=8, help="Number of attention heads for edge prediction")
parser.add_argument('--multimodal_attention_dim', type=int, default=1024, help="Hidden state dimensionality for edge prediction")
parser.add_argument('--multimodal_attention_mlp_dim', type=int, default=2048, help="MLP dimensionality for edge prediction")
parser.add_argument('--multimodal_attention_depth', type=int, default=6, help="Number of layers for edge prediction")

parser.add_argument('--edge_confidence', type=float, default=0.75, help="Threshold confidence for edge addition")
parser.add_argument('--max_edges_allowed', type=int, default=3, help="Maximum number of edges that can be added")
parser.add_argument('--non_detected_expanded_concept_conf_weight', type=float, default=0.5, help="Confidence weight for nodes not detected by FRCNN")

parser.add_argument('--node_addition', action='store_true', help="Addition of novel concepts")
parser.add_argument('--finetune_net', type=str, default='seq', help="gsnn / classifier / seq (gsnn --> gsnn + classifier) / classifer_only / modified_gsnn")
parser.add_argument('--num_epochs_fine', type=int, default=5, help="Number of epochs of finetuning")
parser.add_argument('--evaluate_finetune', action='store_true', help="Evaluate training of novel concepts")
parser.add_argument('--evaluate_finetune_only_novel', action='store_true', help="Evaluate training on only novel classes")
parser.add_argument('--novel_class_ratio', type=float, default=0.25, help="Ratio of images from novel class in dataset")
parser.add_argument('--pretrain_dataset_size', type=int, default=1000, help="Size of finetune dataset")
parser.add_argument('--finetune_lr_classifier', type=float, default=0.01, help="Finetuning learning rate of classifier")
parser.add_argument('--finetune_lr_bias', type=float, default=1e-4, help="Finetuning learning rate for node bias")
parser.add_argument('--finetune_lr_gsnn', type=float, default=1e-5, help="Finetuning learning rate for encoder (1e-4 for VGG)")
parser.add_argument('--disjoint_class_training', type=bool, default=False, help="")
parser.add_argument('--num_images_novel', type=int, default=-1, help="Maximum number of images used for finetuning, if -1 uses images provided")
parser.add_argument('--top_k_score', type=int, default=4, help="Value of k for top-k score")
parser.add_argument('--num_novel_nodes', type=int, default=5, help="")
parser.add_argument('--use_original_edges', action='store_true', help="Use original graph without RelaTe")

opt = parser.parse_args()